import { bot } from "./app.js";
import { phrases, keyboards } from './language_ua.js';
import { logger } from './logger/index.js';
import { DateTime } from "luxon";

let customerInfo = {};
const phoneRegex = /^\d{10,12}$/;
let userAuth = false;
let customerPhone;


export const anketaListiner = async() => {
    bot.setMyCommands([
      {command: '/start', description: '–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é'},
      {command: '/login', description: '–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å, –¥–ª—è –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ "–í–æ–¥–æ–ª—ñ–π"'},
      {command: '/logout', description: '–í–∏–π—Ç–∏ –∑ –∞–∫–∞—É–Ω—Ç—É'}
    ]);
    
    bot.on('message', async (msg) => {
      console.log(userAuth)
      console.log(customerPhone)
      const chatId = msg.chat.id;
      if (msg.contact) {
        customerPhone = msg.contact.phone_number;
        userAuth = true;
        bot.sendMessage(chatId, phrases.congratAuth, { 
          reply_markup: { keyboard: keyboards.mainMenu, resize_keyboard: true, one_time_keyboard: true }});
      } else if (phoneRegex.test(msg.text)) {
        customerPhone = msg.text;
        userAuth = true;
        bot.sendMessage(chatId, phrases.congratAuth);
      };

      switch (msg.text) {
        case '/start':
          if (userAuth) 
          bot.sendMessage(msg.chat.id, phrases.mainMenu, {
            reply_markup: { keyboard: keyboards.mainMenu, resize_keyboard: true, one_time_keyboard: true }
          });
          else 
          bot.sendMessage(msg.chat.id, phrases.greetings, {
            reply_markup: { keyboard: keyboards.login, resize_keyboard: true, one_time_keyboard: true }
          });
          break;
        case '–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é':
          if (userAuth) {
            bot.sendMessage(msg.chat.id, phrases.mainMenu, {
              reply_markup: { keyboard: keyboards.mainMenu, resize_keyboard: true, one_time_keyboard: true }
            });  
          }
          else
          bot.sendMessage(msg.chat.id, '–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ', {
            reply_markup: { keyboard: keyboards.login, resize_keyboard: true, one_time_keyboard: true }
          });
          break;
        case '/login':
          if (userAuth) {
            userAuth = false;
            bot.sendMessage(msg.chat.id, phrases.alreadyAuth, {
              reply_markup: { keyboard: keyboards.mainMenu, resize_keyboard: true, one_time_keyboard: true }
            });  
          }
          else
          bot.sendMessage(msg.chat.id,  {
            reply_markup: { keyboard: keyboards.login, resize_keyboard: true, one_time_keyboard: true }
          });
          break;
        case '/logout':
        case '–í–∏–π—Ç–∏ –∑ –∞–∫–∞—É–Ω—Ç—É':
          userAuth = false;
          bot.sendMessage(chatId, phrases.logout, {
            reply_markup: { keyboard: keyboards.login, resize_keyboard: true },
          });
          break;
        case '–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å':
        case '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å':
          bot.sendMessage(msg.chat.id, phrases.contactRequest, {
            reply_markup: { keyboard: keyboards.contactRequest, resize_keyboard: true, one_time_keyboard: true }
          });
          break;
        case '–ù—ñ, —è –≤–≤–µ–¥—É –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É':
          bot.sendMessage(msg.chat.id, phrases.phoneRules);
          break;
        case '‚õΩÔ∏è –ö—É–ø—ñ–≤–ª—è —Ç–æ–≤–∞—Ä—É': 
          bot.sendMessage(msg.chat.id, phrases.chooseVendor, {
            reply_markup: { keyboard: keyboards.chooseVendor, resize_keyboard: true, one_time_keyboard: true }
          });
          break;
        case '–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∞': 
          bot.sendMessage(msg.chat.id, phrases.enterVendorNum);
          break;
        case 'üí≥ –†–∞—Ö—É–Ω–æ–∫':
          bot.sendMessage(msg.chat.id, phrases.accountStatus, {
            reply_markup: { keyboard: keyboards.accountStatus, resize_keyboard: true, one_time_keyboard: true }
          });
          break;
        case 'üí∞ –ë–∞–ª–∞–Ω—Å':
          let currentTime = DateTime.now().toFormat('yy-MM-dd HH:mm:ss');
          let userBalance = 0.00;
          let userSpend = 0.00;
          const balanceMessage = `
          ${currentTime}

          üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:
          ${userBalance} –ë–û–ù–£–°–ù–ò–• –≥—Ä–Ω.

          üîÑ –û–±–æ—Ä–æ—Ç –∫–æ—à—Ç—ñ–≤:
          ${userSpend} –ë–û–ù–£–°–ù–ò–• –≥—Ä–Ω.
          `
          bot.sendMessage(msg.chat.id, balanceMessage, {
            reply_markup: { keyboard: keyboards.accountStatus, resize_keyboard: true, one_time_keyboard: true }
          });
          break;
        case 'üí∏ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å':
          bot.sendMessage(msg.chat.id, phrases.enterTopupAmount, {
            reply_markup: { keyboard: keyboards.returnToBalance, resize_keyboard: true, one_time_keyboard: true }
          });
          break;
        case '‚≠êÔ∏è –ë–æ–Ω—É—Å–∏': 
          let userBonusAcc = `
          üí´ –í–∞—à—ñ –±–æ–Ω—É—Å–∏ –ø—Ä–∏ –æ–±–æ—Ä–æ—Ç—ñ:

          ‚úÖ 0 –ë–û–ù–£–°–ù–ò–• –≥—Ä–Ω
          20% –≤—ñ–¥ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è

          ‚ÜóÔ∏è 1000 –ë–û–ù–£–°–ù–ò–• –≥—Ä–Ω
          30% –≤—ñ–¥ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è

          ‚ÜóÔ∏è 2000 –ë–û–ù–£–°–ù–ò–• –≥—Ä–Ω
          30% –≤—ñ–¥ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è

          ‚ÜóÔ∏è 3000 –ë–û–ù–£–°–ù–ò–• –≥—Ä–Ω
          30% –≤—ñ–¥ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è

          ‚ÜóÔ∏è 4000 –ë–û–ù–£–°–ù–ò–• –≥—Ä–Ω
          30% –≤—ñ–¥ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è


          üåü –î–æ–¥–∞—Ç–∫–æ–≤—ñ –±–æ–Ω—É—Å–∏:

          –ó–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω:
          5% –≤—ñ–¥ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è

          –ó–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è QR –∫–æ–¥–æ–º:
          5% –≤—ñ–¥ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
          `
          bot.sendMessage(msg.chat.id, userBonusAcc, {
            reply_markup: { keyboard: keyboards.accountStatus, resize_keyboard: true, one_time_keyboard: true }
          });
          break;
        case 'üìä –Ü—Å—Ç–æ—Ä—ñ—è –æ–ø–µ—Ä–∞—Ü—ñ–π':
          bot.sendMessage(msg.chat.id, phrases.userHistory, {
            reply_markup: { keyboard: keyboards.historyMenu, resize_keyboard: true, one_time_keyboard: true }
          });
          break;
      };
  });
};